{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;;AAEnC,KAAMC,SAAS,CAAC,aAAD,CAAf;AACA,KAAMC,UAAU,CAAhB;AACA,KAAMC,SAAS,YAAf;;AAEA,KAAIC,aAAa,IAAjB;AACA,KAAIC,QAAQ,IAAZ;;AAGA;AAEC,+BAAc;AAAA;;AACb,SAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACA;;AAJF;AAAA;AAAA,mCAOwB;;AAEtB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,SAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,iBAAYI,eAAZ,GAA8B,aAAK;;AAElCd,wBAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACA,MAHD;;AAMAR,iBAAYS,SAAZ,GAAwB,aAAK;AAC5B,UAAG,CAACf,UAAJ,EAAgB;AACfA,oBAAaY,EAAEC,MAAF,CAASC,MAAtB;;AAEAb,eAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;;AAEAA,kBAAWC,KAAX,GAAmB,YAAW;AAC7B,cAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACA,QAFD;AAGA;;AAGDE,cAAQJ,UAAR;AACA,MAbD;;AAgBAM,iBAAYW,OAAZ,GAAsB,aAAK;;AAE1BC,cAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,aAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACA,MAJD;AAOA,KAjCM,CAAP;AAkCA;AA3CF;AAAA;AAAA,iCA8CsBrB,UA9CtB,EA8CkC;;AAEhCH,WAAOyB,OAAP,CAAe,iBAAS;;AAEvB,SAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACCzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAGDzB,gBAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACA,KAPD;AAQA;AAxDF;AAAA;AAAA,qCA2D0B;AACxB,QAAG5B,UAAH,EAAe;AACdC,aADc,CACL;AACTD,kBAAa,IAAb;AACA;AACD;AAhEF;;AAAA;AAAA;AAoEA,CA9EuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function() {\n\n\tconst stores = ['negociacoes'];\n\tconst version = 3;\n\tconst dbName = 'aluraframe';\n\n\tvar connection = null;\n\tvar close = null;\n\n\n\treturn class ConnectionFactory {\n\n\t\tconstructor() {\n\t\t\tthrow new Error('Essa classe não pode ser instanciada (ConnectionFactory)!');\n\t\t}\n\n\n\t\tstatic getConnection() {\n\t\t\t\n\t\t\treturn new Promise((resolve, reject) => {\n\n\t\t\t\tlet openRequest = window.indexedDB.open(dbName, version);\n\n\t\t\t\topenRequest.onupgradeneeded = e => {\n\n\t\t\t\t\tConnectionFactory._createStores(e.target.result);\n\t\t\t\t};\n\n\n\t\t\t\topenRequest.onsuccess = e => {\n\t\t\t\t\tif(!connection) {\n\t\t\t\t\t\tconnection = e.target.result;\n\t\t\t\t\t\t\n\t\t\t\t\t\tclose = connection.close.bind(connection);\n\n\t\t\t\t\t\tconnection.close = function() {\n\t\t\t\t\t\t\tthrow new Error('Você não pode fechar diretamente a conexão!');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\n\t\t\t\t\tresolve(connection);\n\t\t\t\t};\n\n\n\t\t\t\topenRequest.onerror = e => {\n\n\t\t\t\t\tconsole.log(e.target.error);\n\t\t\t\t\treject(e.target.error.name);\n\t\t\t\t};\n\n\n\t\t\t});\n\t\t}\n\n\n\t\tstatic _createStores(connection) {\n\t\t\t\n\t\t\tstores.forEach(store => {\n\n\t\t\t\tif(connection.objectStoreNames.contains(store)) \n\t\t\t\t\tconnection.deleteObjectStore(store);\n\n\n\t\t\t\tconnection.createObjectStore(store, {autoIncrement: true});\n\t\t\t});\n\t\t}\n\n\n\t\tstatic closeConnection() {\n\t\t\tif(connection) {\n\t\t\t\tclose(); // Essa variável armazenou o método close() original da connection antes de realizarmos o Monkey Patching\n\t\t\t\tconnection = null;\n\t\t\t}\n\t\t}\n\n\t}\n\t\n})();\n"]}