{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AACA,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAGaC,iB,WAAAA,iB;AAEZ,8BAAc;AAAA;;AACb,QAAM,IAAIC,KAAJ,CAAU,2DAAV,CAAN;AACA;;;;kCAGsB;;AAEtB,UAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEvC,QAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,gBAAYI,eAAZ,GAA8B,aAAK;;AAElCT,uBAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACA,KAHD;;AAMAR,gBAAYS,SAAZ,GAAwB,aAAK;AAC5B,SAAG,CAAChB,UAAJ,EAAgB;AACfA,mBAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEAd,cAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;;AAEAA,iBAAWC,KAAX,GAAmB,YAAW;AAC7B,aAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACA,OAFD;AAGA;;AAGDE,aAAQL,UAAR;AACA,KAbD;;AAgBAO,gBAAYW,OAAZ,GAAsB,aAAK;;AAE1BC,aAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,YAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACA,KAJD;AAOA,IAjCM,CAAP;AAkCA;;;gCAGoBtB,U,EAAY;;AAEhCH,UAAO0B,OAAP,CAAe,iBAAS;;AAEvB,QAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACC1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAGD1B,eAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACA,IAPD;AAQA;;;oCAGwB;AACxB,OAAG7B,UAAH,EAAe;AACdC,YADc,CACL;AACTD,iBAAa,IAAb;AACA;AACD","file":"ConnectionFactory.js","sourcesContent":["\nconst stores = ['negociacoes'];\nconst version = 3;\nconst dbName = 'aluraframe';\n\nlet connection = null;\nlet close = null;\n\n\nexport class ConnectionFactory {\n\n\tconstructor() {\n\t\tthrow new Error('Essa classe não pode ser instanciada (ConnectionFactory)!');\n\t}\n\n\n\tstatic getConnection() {\n\t\t\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tlet openRequest = window.indexedDB.open(dbName, version);\n\n\t\t\topenRequest.onupgradeneeded = e => {\n\n\t\t\t\tConnectionFactory._createStores(e.target.result);\n\t\t\t};\n\n\n\t\t\topenRequest.onsuccess = e => {\n\t\t\t\tif(!connection) {\n\t\t\t\t\tconnection = e.target.result;\n\t\t\t\t\t\n\t\t\t\t\tclose = connection.close.bind(connection);\n\n\t\t\t\t\tconnection.close = function() {\n\t\t\t\t\t\tthrow new Error('Você não pode fechar diretamente a conexão!');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tresolve(connection);\n\t\t\t};\n\n\n\t\t\topenRequest.onerror = e => {\n\n\t\t\t\tconsole.log(e.target.error);\n\t\t\t\treject(e.target.error.name);\n\t\t\t};\n\n\n\t\t});\n\t}\n\n\n\tstatic _createStores(connection) {\n\t\t\n\t\tstores.forEach(store => {\n\n\t\t\tif(connection.objectStoreNames.contains(store)) \n\t\t\t\tconnection.deleteObjectStore(store);\n\n\n\t\t\tconnection.createObjectStore(store, {autoIncrement: true});\n\t\t});\n\t}\n\n\n\tstatic closeConnection() {\n\t\tif(connection) {\n\t\t\tclose(); // Essa variável armazenou o método close() original da connection antes de realizarmos o Monkey Patching\n\t\t\tconnection = null;\n\t\t}\n\t}\n\n}\n\t"]}