{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDAO","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;IAEaA,iB,WAAAA,iB;AAEZ,8BAAc;AAAA;;AAEb,OAAKC,KAAL,GAAa,IAAIC,wBAAJ,EAAb;AACA;;;;qCAGkB;;AAEZ,UAAOC,QAAQC,GAAR,CAAY,CACf,KAAKC,wBAAL,EADe,EAEf,KAAKC,gCAAL,EAFe,EAGf,KAAKC,iCAAL,EAHe,CAAZ,EAIJC,IAJI,CAIC,oBAAY;;AAEhB,QAAIC,cAAcC,SAASC,MAAT,CAAgB,UAACC,KAAD,EAAQC,OAAR;AAAA,YAAoBD,MAAME,MAAN,CAAaD,OAAb,CAApB;AAAA,KAAhB,EAA2D,EAA3D,CAAlB;AACA,WAAOJ,WAAP;AACH,IARM,EAQJM,KARI,CAQE,gBAAQ;;AAEb,UAAM,IAAIC,KAAJ,CAAUC,IAAV,CAAN;AACH,IAXM,CAAP;AAYH;;;6CAGuB;;AAE1B,UAAO,KAAKhB,KAAL,CACLiB,GADK,CACD,oBADC,EAELV,IAFK,CAEA,uBAAe;AACpB,WAAOC,YAAYU,GAAZ,CAAgB;AAAA,YAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,KAAhB,CAAP;AACA,IAJK,EAKLV,KALK,CAKC,gBAAQ;AACdW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,kDAAV,CAAN;AACA,IARK,CAAP;AASA;;;qDAGkC;;AAElC,UAAO,KAAKf,KAAL,CACLiB,GADK,CACD,sBADC,EAELV,IAFK,CAEA,uBAAe;AACpB,WAAOC,YAAYU,GAAZ,CAAgB;AAAA,YAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,KAAhB,CAAP;AACA,IAJK,EAKLV,KALK,CAKC,gBAAQ;AACdW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,2DAAV,CAAN;AACA,IARK,CAAP;AASA;;;sDAGmC;;AAEnC,UAAO,KAAKf,KAAL,CACLiB,GADK,CACD,uBADC,EAELV,IAFK,CAEA,uBAAe;AACpB,WAAOC,YAAYU,GAAZ,CAAgB;AAAA,YAAU,IAAIC,UAAJ,CAAe,IAAIC,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CAAV;AAAA,KAAhB,CAAP;AACA,IAJK,EAKLV,KALK,CAKC,gBAAQ;AACdW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,4DAAV,CAAN;AACA,IARK,CAAP;AASA;;;2BAGQY,U,EAAY;;AAEpB,UAAOC,qCACLC,aADK,GAELtB,IAFK,CAEA;AAAA,WAAc,IAAIuB,4BAAJ,CAAkBC,UAAlB,CAAd;AAAA,IAFA,EAGLxB,IAHK,CAGA;AAAA,WAAOyB,IAAIC,QAAJ,CAAaN,UAAb,CAAP;AAAA,IAHA,EAILpB,IAJK,CAIA;AAAA,WAAM,oCAAN;AAAA,IAJA,EAKLO,KALK,CAKC,gBAAQ;AACdW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,0CAAV,CAAN;AACA,IARK,CAAP;AASA;;;0BAGO;;AAEP,UAAOa,qCACLC,aADK,GAELtB,IAFK,CAEA;AAAA,WAAc,IAAIuB,4BAAJ,CAAkBC,UAAlB,CAAd;AAAA,IAFA,EAGLxB,IAHK,CAGA;AAAA,WAAOyB,IAAIE,UAAJ,EAAP;AAAA,IAHA,EAILpB,KAJK,CAIC,gBAAQ;AACdW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,oDAAV,CAAN;AACA,IAPK,CAAP;AAQA;;;0BAGO;;AAEP,UAAOa,qCACLC,aADK,GAELtB,IAFK,CAEA;AAAA,WAAc,IAAIuB,4BAAJ,CAAkBC,UAAlB,CAAd;AAAA,IAFA,EAGLxB,IAHK,CAGA;AAAA,WAAOyB,IAAIG,UAAJ,EAAP;AAAA,IAHA,EAIL5B,IAJK,CAIA;AAAA,WAAM,mCAAN;AAAA,IAJA,EAKLO,KALK,CAKC,gBAAQ;AACdW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,qDAAV,CAAN;AACA,IARK,CAAP;AASA;;;0BAGOqB,U,EAAY;;AAEnB,UAAO,KAAKC,gBAAL,GACC9B,IADD,CACM;AAAA,WACLC,YAAY8B,MAAZ,CAAmB;AAAA,YAClB,CAACF,WAAWG,IAAX,CAAgB;AAAA,aAChBZ,WAAWa,QAAX,CAAoBC,mBAApB,CADgB;AAAA,MAAhB,CADiB;AAAA,KAAnB,CADK;AAAA,IADN,EAMC3B,KAND,CAMO,gBAAQ;AACdW,YAAQC,GAAR,CAAYV,IAAZ;AACA,UAAM,IAAID,KAAJ,CAAU,oDAAV,CAAN;AACA,IATD,CAAP;AAUA","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDAO} from '../dao/NegociacaoDAO';\n\nexport class NegociacaoService {\n\n\tconstructor() {\n\n\t\tthis._http = new HttpService();\n\t}\n\n\n\tobterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos.reduce((dados, periodo) => dados.concat(periodo), []);\n            return negociacoes;\n        }).catch(erro => {\n        \t\n            throw new Error(erro);\n        });\n    } \n\n\n\tobterNegociacoesDaSemana() {\n\n\t\treturn this._http\n\t\t\t.get('negociacoes/semana')\n\t\t\t.then(negociacoes => {\n\t\t\t\treturn negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n\t\t\t})\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro);\n\t\t\t\tthrow new Error('Não foi possível obter as negociações da semana!');\n\t\t\t});\t\t\t\t\t\n\t}\n\n\n\tobterNegociacoesDaSemanaAnterior() {\n\n\t\treturn this._http\n\t\t\t.get('negociacoes/anterior')\n\t\t\t.then(negociacoes => {\n\t\t\t\treturn negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n\t\t\t})\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro);\n\t\t\t\tthrow new Error('Não foi possível obter as negociações da semana anterior!');\n\t\t\t});\t\t\t\t\t\n\t}\n\n\n\tobterNegociacoesDaSemanaRetrasada() {\n\n\t\treturn this._http\n\t\t\t.get('negociacoes/retrasada')\n\t\t\t.then(negociacoes => {\n\t\t\t\treturn negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n\t\t\t})\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro);\n\t\t\t\tthrow new Error('Não foi possível obter as negociações da semana retrasada!');\n\t\t\t});\t\t\t\t\t\n\t}\n\n\n\tcadastra(negociacao) {\n\n\t\treturn ConnectionFactory\n\t\t\t.getConnection()\n\t\t\t.then(connection => new NegociacaoDAO(connection))\n\t\t\t.then(dao => dao.adiciona(negociacao))\n\t\t\t.then(() => 'Negociação adicionada com sucesso!')\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro);\n\t\t\t\tthrow new Error('Não foi possível adicionar a negociação!');\n\t\t\t});\n\t}\n\n\n\tlista() {\n\n\t\treturn ConnectionFactory\n\t\t\t.getConnection()\n\t\t\t.then(connection => new NegociacaoDAO(connection))\n\t\t\t.then(dao => dao.listaTodos())\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro);\n\t\t\t\tthrow new Error('Não foi possível obter as negociações cadastradas!');\n\t\t\t});\n\t}\n\n\n\tapaga() {\n\n\t\treturn ConnectionFactory\n\t\t\t.getConnection()\n\t\t\t.then(connection => new NegociacaoDAO(connection))\n\t\t\t.then(dao => dao.apagaTodos())\n\t\t\t.then(() => 'Negociações apagadas com sucesso!')\n\t\t\t.catch(erro => {\n\t\t\t\tconsole.log(erro);\n\t\t\t\tthrow new Error('Não foi possível apagar as negociações cadastradas!');\n\t\t\t});\t\n\t}\n\n\n\timporta(listaAtual) {\n\n\t\treturn this.obterNegociacoes()\n        \t.then(negociacoes => \n        \t\tnegociacoes.filter(negociacao =>\n        \t\t\t!listaAtual.some(negociacaoExistente =>\n        \t\t\t\tnegociacao.isEquals(negociacaoExistente)))\n        \t)\n        \t.catch(erro => {\n        \t\tconsole.log(erro);\n        \t\tthrow new Error('Não foi possível buscar negociações para importar!');\n        \t});\n\t}\n\n\n}"]}